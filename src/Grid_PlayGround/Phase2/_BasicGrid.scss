.phase2_container {
  background-color: #eeeeee;
  width: 1000px;
  height: 500px;
  // it only works with block children
  margin: 30px auto;

  display: grid;
  // explicit with space


  // ----------------------- Grid Template ---------------------------

  // Occupying all colums and row

  // 2)
  grid-template-rows: repeat(2, 1fr);
  // 1)
  // grid-template-rows: repeat(2, 150px);


  // The last item takes all the resot of column space
  // grid-template-columns: repeat(2, 150px) 1fr;

  // takes the same space in the given container
  // grid-template-columns: repeat(3, 1fr);


  // grid-template-columns: 1fr 3fr 1fr;

  // Proiroty: px, %, em are higher than flexible unit.
  // When we put gutter lager, % and px sizes are fixed but 
  // flexible unit size is decreased.
  // grid-template-columns: 50% 1fr 1fr;

  grid-template-columns: repeat(3, 1fr);

  // 2)  Better Way
  // grid-template-rows: repeat(2, 150px);
  // // grid-template-columns: repeat(3, 150px); // with Same size
  // grid-template-columns: repeat(2, 150px) 100px; // with different size ==> control the last item




  // 1)
  // grid-template-rows: 150px 150px;
  // grid-template-columns: 150px 150px 150px;


  // ------------- Grid Gap ---------------
  // 2) same as two lines below
  grid-gap: 30px;

  // 1)
  // grid-row-gap: 30px;
  // grid-column-gap: 30px;
}

.phase2_item {
  padding: 20px;
  font-size: 30px;
  font-family: sans-serif;
  color: white;

  &--1 {
    background-color: orangered;
    // grid-row: 2 / 3;
    // grid-column: 2 / 3;

    // spanning with grid-area
    grid-area: 2 / 2 / 3 / 3;
    // To be on the top than vilolet below
    z-index: 10;
  }

  &--2 {
    background-color: yellowgreen;

    // implicit 
    // grid-column: 1 / 3;
    // ===================> brow is already explicit

    // 3) The best way to get the end of column or row
    grid-column: 2 / -1;
    ;

    // 2) using span start 2 and take one more cell
    // grid-column: 2 / span 1;

    // 1) 
    // implicit
    // grid-column: 2 / 4;
    // ================> brown is alredy explicit

  }

  &--3 {
    background-color: blueviolet;

    // [IMPORTANT!!!!! ]
    // When implict spanning, or gridding,
    // must use grid-row, grid-column

    // it is still implict because it does not defines grid row.
    grid-column: 1 / 3;
    // ==================> it renders in the next line because "item--1" orangered is explicitly defined.
    // "orangered" is higher priority.

    // when grid row is defined, it is explict
    grid-row: 2 / 3;
    // ==================> it covers orangered because it has the same priority.

  }

  &--4 {
    background-color: palegoldenrod;
  }

  &--5 {
    background-color: royalblue;

    // 3) row spanning
    grid-area: 1 / 3 / 3 / 4;

    // 2)
    // Better way
    // Start Row / Start Column / End Row / End Column
    // grid-area: 1 / 3 / 2/ 4;

    // 1)
    // grid-row: 1 / 2;
    // grid-column: 3 / 4;

  }

  &--6 {
    background-color: goldenrod;
    grid-area: 1 / 2 / 2/ 3;
  }

}