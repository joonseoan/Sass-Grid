@import '../../Scss/base';

.stories {

    &__pictures {
        grid-column: full-start / col-end 4;

        display: grid;
        grid-template-rows: repeat(6, 1fr);
        grid-template-columns: repeat(6, 1fr);

        // We can control this issue in the parent by using "align-item"
        align-items: center;

        // conbination of gradient and pitrue        
        // Same color gradient ===> No gradient effect!!!
        // rgba($color-primary, .5),
        // rgba($color-primary, .5))
        background-image: linear-gradient(to right bottom,  
                rgba($color-primary, .5),
                rgba($color-primary, .5)),
                // in bottom layer
                url("/img/back.jpg");
        
        background-size: cover;
        // background-position: center;
        
        @media only screen and (max-width: $bp-medium) {
            grid-row: 6 / 7;
            grid-column: full-start / -1;
            padding: 6rem;
        }

        &__img--1 {

            // for flexible, use %
            // when we use
            width: 100%;

            // [ IMPORTANT ]
            // <div> always filles up the grid
            // However, the image does not filles up the page
            //      because of orginal image's aspact ratio.
            // We can control this issue in the parent by using "align-item"

            grid-row: 2 / 6;
            grid-column: 2 / 6;
            box-shadow: 0 2rem 5rem rgba(#000000, .1);

            @media only screen and (max-width: $bp-medium) {
                // We do not need to specify image width or height oveer here
                grid-row: 1 / -1;
                grid-column: 1 / 5;
            }    
        }

        &__img--2 {

            // to cover outside of boundary of this image
            // size control: it can extend to outside of grid.
            width: 115%;
            box-shadow: 0 2rem 5rem rgba(#000000, .1);

            grid-row: 4 / 6;
            grid-column: 4 / 7;

             // [ OVERRIDING ]
             // align-self: start; // center;// stretch; // center, start, end
             // horizontal
             // justify-self: start; // stretch // center, start, end
            // align-self: start;
            z-index: 10;

            @media only screen and (max-width: $bp-medium) {
                width: 100%;
                grid-row: 1 / -1;
            }
        }
    }

    &__contents {
        background-color: $color-grey-light-1;
        grid-column: col-start 5 / full-end;

        // That is!!
        // Use vh and vw from now on then.!!
        padding: 6rem 6vw;

        // [Control grid]
        // align-content: top;
        // justify-content: center;
        
        // [Control contents inside of grid]
        // justify-items: center;
        // align-items: start;

        // 2) By using grid
        display: grid;
        grid-template-rows: repeat(4, min-content);

        // controls each grid
        align-content: center;
        justify-items: start;
        
        // 1) FlexBox
        // only in order to vertically allocate the contents at the center
        // It works with responsive design.!
        // display: flex;
        // flex-direction: column;

        // // vertically centers the item
        // justify-content: center;

        // // In this case when we use column, it controls the horizontal position 
        // // of contents, starts, end inside of each item
        // align-items: start;

        @media only screen and (max-width: $bp-medium) {
            grid-row: 5 / 6;
            grid-column: full-start / -1;            
        }

        &__text {
            font-style: italic;
            font-size: 1.5rem;

            // in this project, we defined margin-bottom 4rem
            margin-bottom: 4rem;
        }
    }    
}